{"version":3,"sources":["webpack://ngformio/webpack/universalModuleDefinition","webpack://ngformio/webpack/bootstrap","webpack://ngformio/./lib/directives/formBuilder.js","webpack://ngformio/./lib/directives/formio.js","webpack://ngformio/./lib/directives/formioDelete.js","webpack://ngformio/./lib/directives/index.js","webpack://ngformio/./lib/factories/FormioScope.js","webpack://ngformio/./lib/factories/formioTableView.js","webpack://ngformio/./lib/factories/index.js","webpack://ngformio/./lib/filters/index.js","webpack://ngformio/./lib/filters/translate.js","webpack://ngformio/./lib/index.js","webpack://ngformio/./lib/module.js","webpack://ngformio/./lib/modules.js","webpack://ngformio/./lib/providers/Formio.js","webpack://ngformio/./lib/providers/FormioUtils.js","webpack://ngformio/./lib/providers/formioComponents.js","webpack://ngformio/./lib/providers/formioInterceptor.js","webpack://ngformio/./lib/providers/index.js","webpack://ngformio/./node_modules/formiojs/dist/formio.full.min.css","webpack://ngformio/external \"formiojs\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAkC;AACnB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,+CAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,CAAC,CAAC,E;;;;;;;;;;;;AC3EF;AAAA;AAAA;AAAkC;AAClC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,+CAAM;AAChB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC,CAAC,E;;;;;;;;;;;;AC9LF;AAAA;AAAA;AAAkC;AAClC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oFAAoF,cAAc;AAClG,YAAY;AACZ;AACA,cAAc,yDAAyD;AACvE;AACA,iEAAiE,iDAAiD;AAClH,kEAAkE,gDAAgD;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAM;AAClC;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU,+CAAM;AAChB;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,E;;;;;;;;;;;;ACxFF;AAAA;AAAA;AAAA;AAAkB;AACK;;;;;;;;;;;;;ACDvB;AAAA;AAAA;AAAkC;AAClC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,E;;;;;;;;;;;;AChCF;AAAA;AAAA;AAAsC;;AAEtC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAU;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,CAAC,EAAE,E;;;;;;;;;;;;AC3BH;AAAA;AAAA;AAAuB;;;;;;;;;;;;;ACAvB;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAkC;AAClC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE,E;;;;;;;;;;;;AC9CH;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;;;;;;;;;;ACA3C;AAAe,2FAA4B,E;;;;;;;;;;;;ACA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AACC;AACE;AACC;AACD;;;;;;;;;;;;;ACJrB;AAAA;AAAA;AAAkC;;AAElC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAEc;AACf;AACA;;AAEA;AACA,gBAAgB,+CAAM;AACtB,gBAAgB,+CAAM;AACtB,eAAe,+CAAM;AACrB,eAAe,+CAAM;AACrB,eAAe,+CAAM;AACrB,mBAAmB,+CAAM;AACzB,eAAe,+CAAM;AACrB,mBAAmB,+CAAM;AACzB,oBAAoB,+CAAM;AAC1B,eAAe,+CAAM;AACrB,eAAe,+CAAM;AACrB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,MAAM,+CAAM;AACZ;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,MAAM,+CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA,aAAa,+CAAM;AACnB,KAAK;AACL;AACA,CAAC,CAAC,E;;;;;;;;;;;;AC9FF;AAAA;AAAA;AAAiC;;AAEjC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,GAAG,EAAE,8CAAK;AACV,CAAC,CAAC,E;;;;;;;;;;;;AClCF;AAAA;AAAA;AAAsC;;AAEtC;;AAEe;AACf,mBAAmB,mDAAU;AAC7B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,E;;;;;;;;;;;;AC/BF;AAAA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,EAAE,E;;;;;;;;;;;;ACxCH;AAAA;AAAA;AAAA;AAAA;AAAkB;AACU;AACC;;;;;;;;;;;;ACF7B,yC;;;;;;;;;;;ACAA,sD","file":"ng-formio.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"formiojs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"formiojs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngformio\"] = factory(require(\"formiojs\"));\n\telse\n\t\troot[\"ngformio\"] = factory(root[\"formiojs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_formiojs__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","import { Formio } from 'formiojs';\nexport default angular.module('formio').directive('formBuilder', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      url: '=?',\n      form: '=?',\n      options: '<'\n    },\n    link: function (scope, element) {\n      scope.initBuilder(element[0]);\n    },\n    controller: ['$scope', function ($scope) {\n      let builder = null;\n      let builderReady = null;\n      let builderElement = null;\n      $scope.options = $scope.options || {};\n\n      // Initialize the builder.\n      $scope.initBuilder = element => {\n        builderElement = element;\n        builderElement.innerHTML = '';\n        builder = new Formio.FormBuilder(builderElement, $scope.form, $scope.options);\n        builder.ready.then(() => {\n          builder.instance.on('change', event => {\n            // Do not emit form change events if this is from submission data.\n            if (!event.data) {\n              $scope.$emit('formChange', builder.instance.schema);\n            }\n          });\n          builder.instance.onAny((event, ...args) => {\n            $scope.$emit(event, ...args);\n          });\n        });\n\n        builderReady = builder.ready;\n      };\n\n      $scope.display = $scope.form.display;\n\n      // Detect when the display changes.\n      $scope.$watch('form.display', display => {\n        if (builderReady && display) {\n          builderReady.then(() => {\n            if (display !== $scope.display) {\n              builder.setDisplay(display);\n            }\n            $scope.display = display;\n          });\n        }\n      });\n\n      $scope.$watch('form', form => {\n        if (!form || !form.components) {\n          return;\n        }\n        if (builderReady) {\n          builderReady.then(() => {\n            if ($scope.url) {\n              builder.instance.url = $scope.url;\n            }\n            builder.setForm(form);\n          });\n        }\n      });\n\n      $scope.$on('$destroy', function () {\n        if (builder && builder.instance) {\n          builder.instance.destroy(true);\n        }\n      });\n    }],\n    template: '<div/>'\n  };\n});","import { Formio } from 'formiojs';\nconst app = angular.module('formio');\nexport default app.directive('formio', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      src: '=?',\n      url: '=?',\n      form: '=?',\n      submission: '=?',\n      readOnly: '=?',\n      hideComponents: '=?',\n      noSubmit: '=?',\n      options: '<?'\n    },\n    link: function (scope, element) {\n      scope.element = element[0];\n      scope.formioReady = false;\n      scope.initialized = false;\n      scope.options = scope.options || {};\n      scope.noSubmit = !!scope.noSubmit;\n    },\n    controller: ['$scope', '$q', function ($scope, $q) {\n      $scope.onLoad = $q.defer();\n      $scope.onFormio = $scope.onLoad.promise;\n      $scope.initializeForm = function () {\n        if (!$scope.element) {\n          return;\n        }\n\n        // Set read only if using legacy option.\n        if (!$scope.options.hasOwnProperty('readOnly') && $scope.readOnly !== undefined) {\n          $scope.options.readOnly = $scope.readOnly;\n        }\n\n        // Allow legacy hideComponents support.\n        if (!$scope.options.hasOwnProperty('hide') && $scope.hideComponents) {\n          $scope.options.hide = $scope.hideComponents.reduce((option, key) => {\n            option[key] = true;\n            return option;\n          }, {});\n        }\n\n        // Add the live form parameter to the url.\n        if ($scope.src && $scope.src.indexOf('live=') === -1) {\n          $scope.src += $scope.src.indexOf('?') === -1 ? '?' : '&';\n          $scope.src += 'live=1';\n        }\n\n        if ($scope.src || $scope.form) {\n          $scope.initialized = true;\n          Formio.createForm($scope.element, $scope.src || $scope.form, _.cloneDeep($scope.options)).then(formio => {\n            formio.nosubmit = $scope.noSubmit;\n            $scope.$emit('formLoad', formio.wizard ? formio.wizard : formio.form);\n            $scope.formio = formio;\n            $scope.setupForm();\n          });\n        }\n      };\n\n      $scope.setupForm = function () {\n        if ($scope.submission) {\n          $scope.formio.submission = angular.copy($scope.submission);\n        }\n        if ($scope.url) {\n          $scope.formio.url = $scope.url;\n          $scope.formio.nosubmit = $scope.noSubmit || false;\n        }\n        $scope.formio.events.onAny(function () {\n          // Keep backwards compatibility by firing old events as well.\n          const args = Array.prototype.slice.call(arguments);\n\n          const eventParts = args[0].split('.');\n\n          let shouldFire = true;\n\n          // Only handle formio events.\n          if (eventParts[0] !== 'formio' || eventParts.length !== 2) {\n            return;\n          }\n\n          // Remove formio. from event.\n          args[0] = eventParts[1];\n          switch (eventParts[1]) {\n            case 'error':\n              args[0] = 'formError';\n              break;\n            case 'submit':\n              args[0] = $scope.formio.nosubmit || !$scope.formio._src ? 'formSubmission' : 'formSubmit';\n              break;\n            case 'submitDone':\n              args[0] = 'formSubmission';\n              break;\n            case 'prevPage':\n              args[0] = 'wizardPrev';\n              break;\n            case 'nextPage':\n              args[0] = 'wizardNext';\n              break;\n            case 'customEvent':\n              args[0] = args[1].type;\n              //prevent customEvent from firing when it's emitted by button with event action (as it is emitted twice)\n              if (args[1].component && args[1].component.type === 'button' && args[1].component.action === 'event') {\n                shouldFire = false;\n              }\n              break;\n          }\n\n          if (shouldFire) {\n            $scope.$emit.apply($scope, args);\n          }\n        });\n\n        $scope.formioReady = true;\n        $scope.onLoad.resolve($scope.formio);\n        return $scope.formio;\n      };\n\n      $scope.$watch('src', src => {\n        if (!src) {\n          return;\n        }\n        if ($scope.formioReady) {\n          $scope.formio.src = src;\n        } else if (!$scope.initialized) {\n          $scope.initializeForm();\n        } else {\n          $scope.onFormio.then(() => $scope.formio.src = src);\n        }\n      });\n\n      $scope.$watch('url', url => {\n        if (!url) {\n          return;\n        }\n        if ($scope.formioReady) {\n          $scope.formio.url = url;\n          $scope.formio.nosubmit = $scope.noSubmit || false;\n        } else if (!$scope.initialized) {\n          $scope.initializeForm();\n        } else {\n          $scope.onFormio.then(() => {\n            $scope.formio.url = url;\n            $scope.formio.nosubmit = $scope.noSubmit || false;\n          });\n        }\n      });\n\n      $scope.$watch('form', form => {\n        if (!form || !form.components) {\n          return;\n        }\n        if ($scope.formioReady) {\n          $scope.formio.form = form;\n        } else if (!$scope.initialized) {\n          $scope.initializeForm();\n        } else {\n          $scope.onFormio.then(() => $scope.formio.form = form);\n        }\n      });\n\n      $scope.$watch('submission', submission => {\n        if (!submission || $scope.nowatch) {\n          $scope.nowatch = false;\n          return;\n        }\n        $scope.onFormio.then(() => {\n          angular.copy(submission, $scope.formio.submission);\n        });\n      }, true);\n\n      $scope.$on('change', function () {\n        $scope.nowatch = true;\n        angular.merge($scope.submission, $scope.formio.submission);\n        $scope.$apply();\n      });\n\n      // Clean up the Form from DOM.\n      $scope.$on('$destroy', function () {\n        if ($scope.formio) {\n          $scope.formio.destroy(true);\n        }\n      });\n\n      // Initialize the form.\n      $scope.initializeForm();\n    }],\n    template: '<div />'\n  };\n});","import { Formio } from 'formiojs';\nconst app = angular.module('formio');\nexport default app.directive('formioDelete', function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      form: '=?',\n      submission: '=?',\n      src: '=?',\n      formAction: '=?',\n      resourceName: '=?',\n      message: '=?',\n      options: '=?'\n    },\n    template: `<form role=\"form\">\n        <div ng-repeat=\"alert in formioAlerts track by $index\" class=\"alert alert-{{ alert.type }}\" role=\"alert\">\n          {{ alert.message | formioTranslate:null:options.building }}\n        </div>\n        <h3>{{ deleteMessage | formioTranslate:null:options.building }}</h3>\n        <div class=\"btn-toolbar\">\n          <button ng-click=\"onDelete()\" class=\"btn btn-danger\">{{ 'Yes' | formioTranslate:null:options.building }}</button>\n          <button ng-click=\"onCancel()\" class=\"btn btn-default\">{{ 'No' | formioTranslate:null:options.building }}</button>\n        </div>\n      </form>`,\n    controller: ['$scope', '$element', '$http', 'FormioScope', function ($scope, $element, $http, FormioScope) {\n      $scope.options = $scope.options || {};\n      $scope.formioAlerts = [];\n      $scope.showAlerts = function (alerts) {\n        $scope.formioAlerts = [].concat(alerts);\n      };\n      var resourceName = '';\n      var methodName = '';\n      $scope.$watch('src', src => {\n        if (!src) {\n          return;\n        }\n        $scope.formio = new Formio(src);\n        resourceName = $scope.formio.submissionId ? 'submission' : 'form';\n        var resourceTitle = resourceName.charAt(0).toUpperCase() + resourceName.slice(1);\n        methodName = 'delete' + resourceTitle;\n        $scope.deleteMessage = $scope.message || 'Are you sure you wish to delete the ' + resourceName + '?';\n      });\n\n      $scope.$watch('resourceName', name => {\n        if (!name) {\n          return;\n        }\n        resourceName = name;\n      });\n\n      $scope.$watch('formAction', function (action) {\n        if (!action) {\n          return;\n        }\n\n        $scope.action = action;\n        $scope.deleteMessage = $scope.message || 'Are you sure you wish to delete the ' + resourceName + '?';\n      });\n\n      // Create delete capability.\n      $scope.onDelete = function () {\n        resourceName = resourceName || 'resource';\n        // Rebuild resourceTitle, $scope.resourceName could have changed\n        var resourceTitle = resourceName.charAt(0).toUpperCase() + resourceName.slice(1);\n        // Called when the delete is done.\n        var onDeleteDone = function (data) {\n          $scope.showAlerts({\n            type: 'success',\n            message: resourceTitle + ' was deleted.'\n          });\n          Formio.clearCache();\n          $scope.$emit('delete', data);\n        };\n\n        if ($scope.action) {\n          $http.delete($scope.action).then(onDeleteDone, FormioScope.onError($scope, $element));\n        } else if ($scope.formio) {\n          if (!methodName) return;\n          if (typeof $scope.formio[methodName] !== 'function') return;\n          $scope.formio[methodName]().then(onDeleteDone, FormioScope.onError($scope, $element));\n        }\n      };\n      $scope.onCancel = function () {\n        $scope.$emit('cancel');\n      };\n    }]\n  };\n});","import './formio';\nimport './formBuilder';\nimport './formioDelete';","import { Formio } from 'formiojs';\nconst app = angular.module('formio');\nexport default app.factory('FormioScope', function () {\n  return {\n    onError: function ($scope, $element) {\n      return function (error) {\n        if (error.name === 'ValidationError' && $element) {\n          var element = $element.find('#form-group-' + error.details[0].path);\n          element.addClass('has-error');\n          var message = 'ValidationError: ' + error.details[0].message;\n          $scope.showAlerts({\n            type: 'danger',\n            message: message\n          });\n          $scope.$on('formSubmit', function () {\n            element.removeClass('has-error');\n          });\n        } else {\n          if (error instanceof Error) {\n            error = error.toString();\n          } else if (typeof error === 'object') {\n            error = JSON.stringify(error);\n          }\n          $scope.showAlerts({\n            type: 'danger',\n            message: error\n          });\n        }\n        $scope.$emit('formError', error);\n      };\n    }\n  };\n});","import { Components } from 'formiojs';\n\nconst app = angular.module('formio');\nexport default app.factory('formioTableView', [function () {\n  return function (value, component) {\n    if (!value && value !== 0 && value !== false) {\n      return '';\n    }\n    if (!component || !component.input || !component.type) {\n      return value;\n    }\n    const componentObject = Components.create(component, {\n      readOnly: true,\n      viewAsHtml: true\n    });\n    if (!componentObject.getView) {\n      return value;\n    }\n    if (component.multiple && value.length > 0) {\n      var values = [];\n      angular.forEach(value, function (arrayValue) {\n        values.push(componentObject.getView(arrayValue));\n      });\n      return values;\n    }\n    return componentObject.getView(value);\n  };\n}]);","import './FormioScope';\nimport './formioTableView';","import './translate';","import { Formio } from 'formiojs';\nconst app = angular.module('formio');\nexport default app.filter('formioTranslate', ['$filter', '$injector', function ($filter, $injector) {\n  var formioTranslate = function (text, key, builder) {\n    /**\n     * Lookup the available translate libraries, currently supports:\n     * angular-translate: @see https://github.com/angular-translate/angular-translate\n     * angular-gettext: @see https://github.com/rubenv/angular-gettext\n     */\n    var $translate, gettextCatalog;\n    if ($injector.has('$translate')) {\n      $translate = $injector.get('$translate');\n    } else if ($injector.has('gettextCatalog')) {\n      gettextCatalog = $injector.get('gettextCatalog');\n    }\n    if (builder) return text;\n    try {\n      // Translate text using either angular-translate or angular-gettext\n      var translateText = function (text) {\n        if ($translate) return $translate.instant(text);\n        if (gettextCatalog) return gettextCatalog.getString(text);\n        return text;\n      };\n\n      // Allow translating by field key which helps with large blocks of html.\n      if (key) {\n        var result = translateText(key);\n        if (result === key) {\n          result = translateText(text);\n        }\n        return result;\n      }\n\n      return translateText(text);\n    } catch (e) {\n      return text;\n    }\n  };\n  formioTranslate.$stateful = true;\n  formioTranslate.use = function (language) {\n    if ($injector.has('$translate')) {\n      var $translate = $injector.get('$translate');\n      $translate.use(language);\n    }\n  };\n  return formioTranslate;\n}]);","import 'formiojs/dist/formio.full.min.css';\nexport * from './modules';","export default angular.module('formio', []);","import './module';\nimport './filters';\nimport './providers';\nimport './directives';\nimport './factories';\nexport * from 'formiojs';","import { Formio } from 'formiojs';\n\nconst app = angular.module('formio');\n\n// Configure the formioInterceptor. to be used.\napp.config(['$httpProvider', '$injector', function ($httpProvider, $injector) {\n  if (!$httpProvider.defaults.headers.get) {\n    $httpProvider.defaults.headers.get = {};\n  }\n\n  // Make sure that ngAnimate doesn't mess up loader.\n  try {\n    $injector.get('$animateProvider').classNameFilter(/^((?!(fa-spinner|glyphicon-spin)).)*$/);\n  }\n  /* eslint-disable no-empty */\n  catch (err) {}\n  /* eslint-enable no-empty */\n\n  // Disable IE caching for GET requests.\n  $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';\n  $httpProvider.defaults.headers.get.Pragma = 'no-cache';\n  $httpProvider.interceptors.push('formioInterceptor');\n}]);\n\nexport default app.provider('Formio', function () {\n  // Return the provider interface.\n  return {\n\n    // Expose Formio configuration functions\n    setBaseUrl: Formio.setBaseUrl,\n    getBaseUrl: Formio.getBaseUrl,\n    setApiUrl: Formio.setBaseUrl,\n    getApiUrl: Formio.getBaseUrl,\n    setAppUrl: Formio.setAppUrl,\n    setProjectUrl: Formio.setProjectUrl,\n    getAppUrl: Formio.getAppUrl,\n    getProjectUrl: Formio.getProjectUrl,\n    registerPlugin: Formio.registerPlugin,\n    getPlugin: Formio.getPlugin,\n    providers: Formio.providers,\n    setDomain: function () {\n      // Remove this?\n    },\n\n    $get: ['$rootScope', '$q', function ($rootScope, $q) {\n      var wrapQPromise = function (promise) {\n        return $q.when(promise).catch(function (error) {\n          if (error === 'Unauthorized') {\n            $rootScope.$broadcast('formio.unauthorized', error);\n          } else if (error === 'Login Timeout') {\n            $rootScope.$broadcast('formio.sessionExpired', error);\n          }\n          // Propagate error\n          throw error;\n        });\n      };\n\n      Formio.registerPlugin({\n        priority: -100,\n        // Wrap Formio.request's promises with $q so $apply gets called correctly.\n        wrapRequestPromise: wrapQPromise,\n        wrapStaticRequestPromise: wrapQPromise\n      }, 'ngFormioPromiseWrapper');\n\n      // Call a safe apply.\n      const safeApply = function (fn) {\n        var phase = $rootScope.$root.$$phase;\n        if (phase == '$apply' || phase == '$digest') {\n          if (fn && typeof fn === 'function') {\n            fn();\n          }\n        } else {\n          $rootScope.$apply(fn);\n        }\n      };\n\n      // Broadcast offline events from $rootScope\n      Formio.events.onAny(function () {\n        var event = 'formio.' + this.event;\n        var args = [].splice.call(arguments, 0);\n        args.unshift(event);\n        try {\n          safeApply(function () {\n            $rootScope.$broadcast.apply($rootScope, args);\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      });\n\n      // Return the formio interface.\n      return Formio;\n    }]\n  };\n});","import { Utils } from 'formiojs';\n\nconst app = angular.module('formio');\nexport default app.factory('FormioUtils', function () {\n  return Object.assign({\n    hideFields: function (form, components) {\n      this.eachComponent(form.components, function (component) {\n        for (var i in components) {\n          if (component.key === components[i]) {\n            component.type = 'hidden';\n          }\n        }\n      });\n    },\n    uniqueName: function (name) {\n      var parts = name.toLowerCase().replace(/[^0-9a-z\\.]/g, '').split('.');\n      var fileName = parts[0];\n      var ext = '';\n      if (parts.length > 1) {\n        ext = '.' + parts[parts.length - 1];\n      }\n      return fileName.substr(0, 10) + '-' + this.guid() + ext;\n    },\n    guid: function () {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    },\n    fieldWrap: function (field) {\n      return field;\n    }\n  }, Utils);\n});","import { Components } from 'formiojs';\n\nconst app = angular.module('formio');\n\nexport default app.provider('formioComponents', function () {\n  var components = Components.components;\n  var groups = {\n    __component: {\n      title: 'Basic Components'\n    },\n    advanced: {\n      title: 'Special Components'\n    },\n    layout: {\n      title: 'Layout Components'\n    }\n  };\n  return {\n    addGroup: function (name, group) {\n      console.warn('formioComponents is deprecated');\n    },\n    register: function (type, component, group) {\n      console.warn('formioComponents is deprecated');\n    },\n    $get: function () {\n      return {\n        components: components,\n        groups: groups\n      };\n    }\n  };\n});","const app = angular.module('formio');\nexport default app.factory('formioInterceptor', ['$q', '$rootScope', 'Formio', function ($q, $rootScope, Formio) {\n  const Interceptor = {\n    /**\n     * Update JWT token received from response.\n     */\n    response: function (response) {\n      var token = response.headers('x-jwt-token');\n      if (response.status >= 200 && response.status < 300 && token && token !== '') {\n        Formio.setToken(token);\n      }\n      return response;\n    },\n\n    /**\n     * Intercept a response error.\n     */\n    responseError: function (response) {\n      if (parseInt(response.status, 10) === 440) {\n        response.loggedOut = true;\n        Formio.setToken(null);\n        $rootScope.$broadcast('formio.sessionExpired', response.body);\n      } else if (parseInt(response.status, 10) === 401) {\n        $rootScope.$broadcast('formio.unauthorized', response.body);\n      }\n      return $q.reject(response);\n    },\n\n    /**\n     * Set the token in the request headers.\n     */\n    request: function (config) {\n      if (config.disableJWT) return config;\n      var token = Formio.getToken();\n      if (token) config.headers['x-jwt-token'] = token;\n      return config;\n    }\n  };\n\n  return Interceptor;\n}]);","import './Formio';\nimport './formioComponents';\nimport './formioInterceptor';\nimport './FormioUtils';","// removed by extract-text-webpack-plugin","module.exports = __WEBPACK_EXTERNAL_MODULE_formiojs__;"],"sourceRoot":""}